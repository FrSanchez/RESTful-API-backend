<?php
namespace Api\Config\Objects\Account\Gen\Doctrine;

use Api\Objects\FieldDefinition;
use Api\Objects\Doctrine\QueryBuilderNode;
use RuntimeException;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
abstract class AbstractAccountDoctrineQueryModifier extends \Api\Objects\Doctrine\DoctrineQueryModifier
{
	/**
	 * Override this method to add any additional fields or join for the derived fields selected by the user. Usually
	 * getValueForDerivedField will also need to be overridden to handle calculating the derived field's value.
	 *
	 * @param QueryBuilderNode $queryBuilderNode
	 * @param FieldDefinition[] $derivedFieldDefinitions
	 */
	public function modifyQueryBuilderWithDerivedFields(QueryBuilderNode $queryBuilderNode, array $derivedFieldDefinitions): void
	{
		foreach ($derivedFieldDefinitions as $fieldDef) {
			switch ($fieldDef->getName()) {
				case 'adminId':
				case 'admin_id':
					$this->modifyQueryWithAdminIdField($queryBuilderNode, $fieldDef);
					break;
				case 'apiCallsUsed':
				case 'api_calls_used':
					$this->modifyQueryWithApiCallsUsedField($queryBuilderNode, $fieldDef);
					break;
				case 'level':
				
					$this->modifyQueryWithLevelField($queryBuilderNode, $fieldDef);
					break;
				case 'maximumDailyApiCalls':
				case 'maximum_daily_api_calls':
					$this->modifyQueryWithMaximumDailyApiCallsField($queryBuilderNode, $fieldDef);
					break;
				default:
					throw new RuntimeException("Unhandled derived field: {$fieldDef->getName()}.");
			}
		}
			}

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 */
	protected function getValueForDerivedField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef)
	{
		switch ($fieldDef->getName()) {
			case 'adminId':
			case 'admin_id':
				return $this->getValueForAdminIdField($doctrineRecord, $fieldDef);
			case 'apiCallsUsed':
			case 'api_calls_used':
				return $this->getValueForApiCallsUsedField($doctrineRecord, $fieldDef);
			case 'level':
			
				return $this->getValueForLevelField($doctrineRecord, $fieldDef);
			case 'maximumDailyApiCalls':
			case 'maximum_daily_api_calls':
				return $this->getValueForMaximumDailyApiCallsField($doctrineRecord, $fieldDef);
			default:
				return parent::getValueForDerivedField($doctrineRecord, $fieldDef);
		}
			}

	/**
	 * Override this method to add any additional fields or joins to calculate the adminId field. You should also override
	 * the getValueForAdminIdField function to handle calculating the adminId value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForAdminIdField
	 */
	protected abstract function modifyQueryWithAdminIdField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithAdminIdField
	 */
	protected abstract function getValueForAdminIdField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the apiCallsUsed field. You should also override
	 * the getValueForApiCallsUsedField function to handle calculating the apiCallsUsed value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForApiCallsUsedField
	 */
	protected abstract function modifyQueryWithApiCallsUsedField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithApiCallsUsedField
	 */
	protected abstract function getValueForApiCallsUsedField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the level field. You should also override
	 * the getValueForLevelField function to handle calculating the level value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForLevelField
	 */
	protected abstract function modifyQueryWithLevelField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithLevelField
	 */
	protected abstract function getValueForLevelField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the maximumDailyApiCalls field. You should also override
	 * the getValueForMaximumDailyApiCallsField function to handle calculating the maximumDailyApiCalls value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForMaximumDailyApiCallsField
	 */
	protected abstract function modifyQueryWithMaximumDailyApiCallsField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithMaximumDailyApiCallsField
	 */
	protected abstract function getValueForMaximumDailyApiCallsField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

}
