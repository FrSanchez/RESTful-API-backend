<?php
namespace Api\Config\Objects\Account\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\AccountRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class AccountRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof AccountRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				AccountRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof AccountRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				AccountRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param AccountRepresentation $representation
	 */
	private function validateReadOnlyFields(AccountRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsAddressOneSet()) {
			$invalidFields[] = 'addressOne';
		}

		if ($representation->getIsAddressTwoSet()) {
			$invalidFields[] = 'addressTwo';
		}

		if ($representation->getIsAdminSet()) {
			$invalidFields[] = 'admin';
		}

		if ($representation->getIsAdminIdSet()) {
			$invalidFields[] = 'adminId';
		}

		if ($representation->getIsApiCallsUsedSet()) {
			$invalidFields[] = 'apiCallsUsed';
		}

		if ($representation->getIsCitySet()) {
			$invalidFields[] = 'city';
		}

		if ($representation->getIsCompanySet()) {
			$invalidFields[] = 'company';
		}

		if ($representation->getIsCountrySet()) {
			$invalidFields[] = 'country';
		}

		if ($representation->getIsCreatedAtSet()) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCreatedBySet()) {
			$invalidFields[] = 'createdBy';
		}

		if ($representation->getIsCreatedByIdSet()) {
			$invalidFields[] = 'createdById';
		}

		if ($representation->getIsFaxSet()) {
			$invalidFields[] = 'fax';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsLevelSet()) {
			$invalidFields[] = 'level';
		}

		if ($representation->getIsMaximumDailyApiCallsSet()) {
			$invalidFields[] = 'maximumDailyApiCalls';
		}

		if ($representation->getIsPhoneSet()) {
			$invalidFields[] = 'phone';
		}

		if ($representation->getIsPluginCampaignSet()) {
			$invalidFields[] = 'pluginCampaign';
		}

		if ($representation->getIsPluginCampaignIdSet()) {
			$invalidFields[] = 'pluginCampaignId';
		}

		if ($representation->getIsStateSet()) {
			$invalidFields[] = 'state';
		}

		if ($representation->getIsTerritorySet()) {
			$invalidFields[] = 'territory';
		}

		if ($representation->getIsUpdatedAtSet()) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsUpdatedBySet()) {
			$invalidFields[] = 'updatedBy';
		}

		if ($representation->getIsUpdatedByIdSet()) {
			$invalidFields[] = 'updatedById';
		}

		if ($representation->getIsWebsiteSet()) {
			$invalidFields[] = 'website';
		}

		if ($representation->getIsZipSet()) {
			$invalidFields[] = 'zip';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param AccountRepresentation $representation
	 */
	private function validateRequiredFields(AccountRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(AccountRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsAddressOneSet() && is_null($representation->getAddressOne())) {
			$invalidFields[] = 'addressOne';
		}

		if ($representation->getIsAddressTwoSet() && is_null($representation->getAddressTwo())) {
			$invalidFields[] = 'addressTwo';
		}

		if ($representation->getIsAdminIdSet() && is_null($representation->getAdminId())) {
			$invalidFields[] = 'adminId';
		}

		if ($representation->getIsApiCallsUsedSet() && is_null($representation->getApiCallsUsed())) {
			$invalidFields[] = 'apiCallsUsed';
		}

		if ($representation->getIsCitySet() && is_null($representation->getCity())) {
			$invalidFields[] = 'city';
		}

		if ($representation->getIsCompanySet() && is_null($representation->getCompany())) {
			$invalidFields[] = 'company';
		}

		if ($representation->getIsCountrySet() && is_null($representation->getCountry())) {
			$invalidFields[] = 'country';
		}

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCreatedByIdSet() && is_null($representation->getCreatedById())) {
			$invalidFields[] = 'createdById';
		}

		if ($representation->getIsFaxSet() && is_null($representation->getFax())) {
			$invalidFields[] = 'fax';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsLevelSet() && is_null($representation->getLevel())) {
			$invalidFields[] = 'level';
		}

		if ($representation->getIsMaximumDailyApiCallsSet() && is_null($representation->getMaximumDailyApiCalls())) {
			$invalidFields[] = 'maximumDailyApiCalls';
		}

		if ($representation->getIsPhoneSet() && is_null($representation->getPhone())) {
			$invalidFields[] = 'phone';
		}

		if ($representation->getIsPluginCampaignIdSet() && is_null($representation->getPluginCampaignId())) {
			$invalidFields[] = 'pluginCampaignId';
		}

		if ($representation->getIsStateSet() && is_null($representation->getState())) {
			$invalidFields[] = 'state';
		}

		if ($representation->getIsTerritorySet() && is_null($representation->getTerritory())) {
			$invalidFields[] = 'territory';
		}

		if ($representation->getIsUpdatedAtSet() && is_null($representation->getUpdatedAt())) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsUpdatedByIdSet() && is_null($representation->getUpdatedById())) {
			$invalidFields[] = 'updatedById';
		}

		if ($representation->getIsWebsiteSet() && is_null($representation->getWebsite())) {
			$invalidFields[] = 'website';
		}

		if ($representation->getIsZipSet() && is_null($representation->getZip())) {
			$invalidFields[] = 'zip';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
