<?php
namespace Api\Config\Objects\User\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\UserRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class UserRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof UserRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				UserRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof UserRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				UserRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param UserRepresentation $representation
	 */
	private function validateReadOnlyFields(UserRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCreatedAtSet()) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCreatedBySet()) {
			$invalidFields[] = 'createdBy';
		}

		if ($representation->getIsCreatedByIdSet()) {
			$invalidFields[] = 'createdById';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsIsDeletedSet()) {
			$invalidFields[] = 'isDeleted';
		}

		if ($representation->getIsSalesforceIdSet()) {
			$invalidFields[] = 'salesforceId';
		}

		if ($representation->getIsUpdatedAtSet()) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsUpdatedBySet()) {
			$invalidFields[] = 'updatedBy';
		}

		if ($representation->getIsUpdatedByIdSet()) {
			$invalidFields[] = 'updatedById';
		}

		if ($representation->getIsUsernameSet()) {
			$invalidFields[] = 'username';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param UserRepresentation $representation
	 */
	private function validateRequiredFields(UserRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(UserRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCreatedByIdSet() && is_null($representation->getCreatedById())) {
			$invalidFields[] = 'createdById';
		}

		if ($representation->getIsEmailSet() && is_null($representation->getEmail())) {
			$invalidFields[] = 'email';
		}

		if ($representation->getIsFirstNameSet() && is_null($representation->getFirstName())) {
			$invalidFields[] = 'firstName';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsIsDeletedSet() && is_null($representation->getIsDeleted())) {
			$invalidFields[] = 'isDeleted';
		}

		if ($representation->getIsJobTitleSet() && is_null($representation->getJobTitle())) {
			$invalidFields[] = 'jobTitle';
		}

		if ($representation->getIsLastNameSet() && is_null($representation->getLastName())) {
			$invalidFields[] = 'lastName';
		}

		if ($representation->getIsRoleSet() && is_null($representation->getRole())) {
			$invalidFields[] = 'role';
		}

		if ($representation->getIsSalesforceIdSet() && is_null($representation->getSalesforceId())) {
			$invalidFields[] = 'salesforceId';
		}

		if ($representation->getIsUpdatedAtSet() && is_null($representation->getUpdatedAt())) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsUpdatedByIdSet() && is_null($representation->getUpdatedById())) {
			$invalidFields[] = 'updatedById';
		}

		if ($representation->getIsUsernameSet() && is_null($representation->getUsername())) {
			$invalidFields[] = 'username';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
