<?php
namespace Api\Config\Objects\ListEmail\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\ListEmailRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class ListEmailRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof ListEmailRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				ListEmailRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof ListEmailRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				ListEmailRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param ListEmailRepresentation $representation
	 */
	private function validateReadOnlyFields(ListEmailRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignSet()) {
			$invalidFields[] = 'campaign';
		}

		if ($representation->getIsCampaignIdSet()) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsClientTypeSet()) {
			$invalidFields[] = 'clientType';
		}

		if ($representation->getIsCreatedAtSet()) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCreatedBySet()) {
			$invalidFields[] = 'createdBy';
		}

		if ($representation->getIsCreatedByIdSet()) {
			$invalidFields[] = 'createdById';
		}

		if ($representation->getIsEmailTemplateIdSet()) {
			$invalidFields[] = 'emailTemplateId';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsIsPausedSet()) {
			$invalidFields[] = 'isPaused';
		}

		if ($representation->getIsIsSentSet()) {
			$invalidFields[] = 'isSent';
		}

		if ($representation->getIsNameSet()) {
			$invalidFields[] = 'name';
		}

		if ($representation->getIsOperationalEmailSet()) {
			$invalidFields[] = 'operationalEmail';
		}

		if ($representation->getIsSentAtSet()) {
			$invalidFields[] = 'sentAt';
		}

		if ($representation->getIsTrackerDomainIdSet()) {
			$invalidFields[] = 'trackerDomainId';
		}

		if ($representation->getIsUpdatedAtSet()) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsUpdatedBySet()) {
			$invalidFields[] = 'updatedBy';
		}

		if ($representation->getIsUpdatedByIdSet()) {
			$invalidFields[] = 'updatedById';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param ListEmailRepresentation $representation
	 */
	private function validateRequiredFields(ListEmailRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(ListEmailRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignIdSet() && is_null($representation->getCampaignId())) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsClientTypeSet() && is_null($representation->getClientType())) {
			$invalidFields[] = 'clientType';
		}

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCreatedByIdSet() && is_null($representation->getCreatedById())) {
			$invalidFields[] = 'createdById';
		}

		if ($representation->getIsEmailTemplateIdSet() && is_null($representation->getEmailTemplateId())) {
			$invalidFields[] = 'emailTemplateId';
		}

		if ($representation->getIsHtmlMessageSet() && is_null($representation->getHtmlMessage())) {
			$invalidFields[] = 'htmlMessage';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsIsDeletedSet() && is_null($representation->getIsDeleted())) {
			$invalidFields[] = 'isDeleted';
		}

		if ($representation->getIsIsPausedSet() && is_null($representation->getIsPaused())) {
			$invalidFields[] = 'isPaused';
		}

		if ($representation->getIsIsSentSet() && is_null($representation->getIsSent())) {
			$invalidFields[] = 'isSent';
		}

		if ($representation->getIsNameSet() && is_null($representation->getName())) {
			$invalidFields[] = 'name';
		}

		if ($representation->getIsOperationalEmailSet() && is_null($representation->getOperationalEmail())) {
			$invalidFields[] = 'operationalEmail';
		}

		if ($representation->getIsReplyToOptionsSet() && is_null($representation->getReplyToOptions())) {
			$invalidFields[] = 'replyToOptions';
		}

		if ($representation->getIsSenderOptionsSet() && is_null($representation->getSenderOptions())) {
			$invalidFields[] = 'senderOptions';
		}

		if ($representation->getIsSentAtSet() && is_null($representation->getSentAt())) {
			$invalidFields[] = 'sentAt';
		}

		if ($representation->getIsSubjectSet() && is_null($representation->getSubject())) {
			$invalidFields[] = 'subject';
		}

		if ($representation->getIsTextMessageSet() && is_null($representation->getTextMessage())) {
			$invalidFields[] = 'textMessage';
		}

		if ($representation->getIsTrackerDomainIdSet() && is_null($representation->getTrackerDomainId())) {
			$invalidFields[] = 'trackerDomainId';
		}

		if ($representation->getIsUpdatedAtSet() && is_null($representation->getUpdatedAt())) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsUpdatedByIdSet() && is_null($representation->getUpdatedById())) {
			$invalidFields[] = 'updatedById';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
