<?php
namespace Api\Config\Objects\Visitor\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\VisitorRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class VisitorRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof VisitorRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				VisitorRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof VisitorRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				VisitorRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param VisitorRepresentation $representation
	 */
	private function validateReadOnlyFields(VisitorRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignSet()) {
			$invalidFields[] = 'campaign';
		}

		if ($representation->getIsCampaignIdSet()) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsCampaignParameterSet()) {
			$invalidFields[] = 'campaignParameter';
		}

		if ($representation->getIsContentParameterSet()) {
			$invalidFields[] = 'contentParameter';
		}

		if ($representation->getIsCreatedAtSet()) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsDoNotSellSet()) {
			$invalidFields[] = 'doNotSell';
		}

		if ($representation->getIsHostnameSet()) {
			$invalidFields[] = 'hostname';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsIpAddressSet()) {
			$invalidFields[] = 'ipAddress';
		}

		if ($representation->getIsIsDeletedSet()) {
			$invalidFields[] = 'isDeleted';
		}

		if ($representation->getIsIsIdentifiedSet()) {
			$invalidFields[] = 'isIdentified';
		}

		if ($representation->getIsMediumParameterSet()) {
			$invalidFields[] = 'mediumParameter';
		}

		if ($representation->getIsPageViewCountSet()) {
			$invalidFields[] = 'pageViewCount';
		}

		if ($representation->getIsProspectSet()) {
			$invalidFields[] = 'prospect';
		}

		if ($representation->getIsProspectIdSet()) {
			$invalidFields[] = 'prospectId';
		}

		if ($representation->getIsSourceParameterSet()) {
			$invalidFields[] = 'sourceParameter';
		}

		if ($representation->getIsTermParameterSet()) {
			$invalidFields[] = 'termParameter';
		}

		if ($representation->getIsUpdatedAtSet()) {
			$invalidFields[] = 'updatedAt';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param VisitorRepresentation $representation
	 */
	private function validateRequiredFields(VisitorRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(VisitorRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignIdSet() && is_null($representation->getCampaignId())) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsCampaignParameterSet() && is_null($representation->getCampaignParameter())) {
			$invalidFields[] = 'campaignParameter';
		}

		if ($representation->getIsContentParameterSet() && is_null($representation->getContentParameter())) {
			$invalidFields[] = 'contentParameter';
		}

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsDoNotSellSet() && is_null($representation->getDoNotSell())) {
			$invalidFields[] = 'doNotSell';
		}

		if ($representation->getIsHostnameSet() && is_null($representation->getHostname())) {
			$invalidFields[] = 'hostname';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsIpAddressSet() && is_null($representation->getIpAddress())) {
			$invalidFields[] = 'ipAddress';
		}

		if ($representation->getIsIsDeletedSet() && is_null($representation->getIsDeleted())) {
			$invalidFields[] = 'isDeleted';
		}

		if ($representation->getIsIsIdentifiedSet() && is_null($representation->getIsIdentified())) {
			$invalidFields[] = 'isIdentified';
		}

		if ($representation->getIsMediumParameterSet() && is_null($representation->getMediumParameter())) {
			$invalidFields[] = 'mediumParameter';
		}

		if ($representation->getIsPageViewCountSet() && is_null($representation->getPageViewCount())) {
			$invalidFields[] = 'pageViewCount';
		}

		if ($representation->getIsProspectIdSet() && is_null($representation->getProspectId())) {
			$invalidFields[] = 'prospectId';
		}

		if ($representation->getIsSourceParameterSet() && is_null($representation->getSourceParameter())) {
			$invalidFields[] = 'sourceParameter';
		}

		if ($representation->getIsTermParameterSet() && is_null($representation->getTermParameter())) {
			$invalidFields[] = 'termParameter';
		}

		if ($representation->getIsUpdatedAtSet() && is_null($representation->getUpdatedAt())) {
			$invalidFields[] = 'updatedAt';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
