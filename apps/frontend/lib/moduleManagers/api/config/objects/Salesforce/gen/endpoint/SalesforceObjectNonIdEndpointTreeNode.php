<?php
namespace Api\Config\Objects\Salesforce\Gen\Endpoint;

use Api\Endpoints\EndpointDefinitionProvider;
use Api\Endpoints\EndpointInputDefinition;
use Api\Endpoints\EndpointTreeNode;
use Api\Endpoints\ObjectDeleteEndpointDefinitionProvider;
use Api\Endpoints\ObjectReadEndpointDefinitionProvider;
use Api\Endpoints\ObjectUpdatePartialEndpointDefinitionProvider;
use Api\Objects\ObjectDefinitionCatalog;
use RuntimeException;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class SalesforceObjectNonIdEndpointTreeNode implements EndpointTreeNode
{
	private ObjectDefinitionCatalog $objectDefinitionCatalog;
	private ?ObjectReadEndpointDefinitionProvider $readEndpointDefinitionProvider = null;
	private ?EndpointTreeNode $objectActionsEndpointTreeNode = null;
	
	public function __construct(ObjectDefinitionCatalog $objectDefinitionCatalog)
	{
		$this->objectDefinitionCatalog = $objectDefinitionCatalog;
	}

	public function doesChildWithPathPartExist(string $pathPart): bool
	{
		// handle object actions {do}
		if ($pathPart === 'do') {
		return true;
		}

		return false;
		
	}

	public function getChildWithPathPart(string $pathPart): EndpointTreeNode
	{
		// handle object actions {do}
		if ($pathPart === 'do') {
			return $this->getObjectActionEndpointTreeNode();
		}
		throw new RuntimeException("No child matches path part $pathPart");
		
	}

	public function hasEndpointDefinitionForMethod(string $method): bool
	{
		if ($method === 'GET') {
			return true;
		}
		return false;
		
	}

	public function getEndpointDefinitionForMethod(string $method): EndpointDefinitionProvider
	{
		if ($method === 'GET') {
			return $this->getReadEndpointDefinitionProvider();
		}
		throw new RuntimeException("Unsupported method: " . $method);
		
	}


	private function getReadEndpointDefinitionProvider(): ObjectReadEndpointDefinitionProvider
	{
		if (is_null($this->readEndpointDefinitionProvider)) {
			$this->readEndpointDefinitionProvider = new ObjectReadEndpointDefinitionProvider(
				$this->objectDefinitionCatalog,
				'Salesforce',
				'SalesforceRepresentation',
				\Api\Gen\Representations\SalesforceRepresentation::class,
true			);
		}
		return $this->readEndpointDefinitionProvider;
	}



	private function getObjectActionEndpointTreeNode(): EndpointTreeNode
	{
		if (is_null($this->objectActionsEndpointTreeNode)) {
			$this->objectActionsEndpointTreeNode = new \Api\Config\Objects\Salesforce\Gen\Endpoint\SalesforceObjectActionsEndpointTreeNode($this->objectDefinitionCatalog);
		}
		return $this->objectActionsEndpointTreeNode;
	}

	
}
