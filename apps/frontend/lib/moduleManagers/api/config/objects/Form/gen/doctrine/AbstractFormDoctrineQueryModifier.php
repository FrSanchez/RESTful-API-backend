<?php
namespace Api\Config\Objects\Form\Gen\Doctrine;

use Api\Objects\FieldDefinition;
use Api\Objects\Doctrine\QueryBuilderNode;
use RuntimeException;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
abstract class AbstractFormDoctrineQueryModifier extends \Api\Objects\Doctrine\DoctrineQueryModifier
{
	/**
	 * Override this method to add any additional fields or join for the derived fields selected by the user. Usually
	 * getValueForDerivedField will also need to be overridden to handle calculating the derived field's value.
	 *
	 * @param QueryBuilderNode $queryBuilderNode
	 * @param FieldDefinition[] $derivedFieldDefinitions
	 */
	public function modifyQueryBuilderWithDerivedFields(QueryBuilderNode $queryBuilderNode, array $derivedFieldDefinitions): void
	{
		foreach ($derivedFieldDefinitions as $fieldDef) {
			switch ($fieldDef->getName()) {
				case 'checkboxAlignment':
				case 'checkbox_alignment':
					$this->modifyQueryWithCheckboxAlignmentField($queryBuilderNode, $fieldDef);
					break;
				case 'fontColor':
				case 'font_color':
					$this->modifyQueryWithFontColorField($queryBuilderNode, $fieldDef);
					break;
				case 'fontFamily':
				case 'font_family':
					$this->modifyQueryWithFontFamilyField($queryBuilderNode, $fieldDef);
					break;
				case 'fontSize':
				case 'font_size':
					$this->modifyQueryWithFontSizeField($queryBuilderNode, $fieldDef);
					break;
				case 'labelAlignment':
				case 'label_alignment':
					$this->modifyQueryWithLabelAlignmentField($queryBuilderNode, $fieldDef);
					break;
				case 'radioAlignment':
				case 'radio_alignment':
					$this->modifyQueryWithRadioAlignmentField($queryBuilderNode, $fieldDef);
					break;
				case 'requiredCharacter':
				case 'required_character':
					$this->modifyQueryWithRequiredCharacterField($queryBuilderNode, $fieldDef);
					break;
				default:
					throw new RuntimeException("Unhandled derived field: {$fieldDef->getName()}.");
			}
		}
			}

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 */
	protected function getValueForDerivedField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef)
	{
		switch ($fieldDef->getName()) {
			case 'checkboxAlignment':
			case 'checkbox_alignment':
				return $this->getValueForCheckboxAlignmentField($doctrineRecord, $fieldDef);
			case 'fontColor':
			case 'font_color':
				return $this->getValueForFontColorField($doctrineRecord, $fieldDef);
			case 'fontFamily':
			case 'font_family':
				return $this->getValueForFontFamilyField($doctrineRecord, $fieldDef);
			case 'fontSize':
			case 'font_size':
				return $this->getValueForFontSizeField($doctrineRecord, $fieldDef);
			case 'labelAlignment':
			case 'label_alignment':
				return $this->getValueForLabelAlignmentField($doctrineRecord, $fieldDef);
			case 'radioAlignment':
			case 'radio_alignment':
				return $this->getValueForRadioAlignmentField($doctrineRecord, $fieldDef);
			case 'requiredCharacter':
			case 'required_character':
				return $this->getValueForRequiredCharacterField($doctrineRecord, $fieldDef);
			default:
				return parent::getValueForDerivedField($doctrineRecord, $fieldDef);
		}
			}

	/**
	 * Override this method to add any additional fields or joins to calculate the checkboxAlignment field. You should also override
	 * the getValueForCheckboxAlignmentField function to handle calculating the checkboxAlignment value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForCheckboxAlignmentField
	 */
	protected abstract function modifyQueryWithCheckboxAlignmentField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithCheckboxAlignmentField
	 */
	protected abstract function getValueForCheckboxAlignmentField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the fontColor field. You should also override
	 * the getValueForFontColorField function to handle calculating the fontColor value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForFontColorField
	 */
	protected abstract function modifyQueryWithFontColorField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithFontColorField
	 */
	protected abstract function getValueForFontColorField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the fontFamily field. You should also override
	 * the getValueForFontFamilyField function to handle calculating the fontFamily value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForFontFamilyField
	 */
	protected abstract function modifyQueryWithFontFamilyField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithFontFamilyField
	 */
	protected abstract function getValueForFontFamilyField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the fontSize field. You should also override
	 * the getValueForFontSizeField function to handle calculating the fontSize value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForFontSizeField
	 */
	protected abstract function modifyQueryWithFontSizeField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithFontSizeField
	 */
	protected abstract function getValueForFontSizeField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the labelAlignment field. You should also override
	 * the getValueForLabelAlignmentField function to handle calculating the labelAlignment value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForLabelAlignmentField
	 */
	protected abstract function modifyQueryWithLabelAlignmentField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithLabelAlignmentField
	 */
	protected abstract function getValueForLabelAlignmentField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the radioAlignment field. You should also override
	 * the getValueForRadioAlignmentField function to handle calculating the radioAlignment value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForRadioAlignmentField
	 */
	protected abstract function modifyQueryWithRadioAlignmentField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithRadioAlignmentField
	 */
	protected abstract function getValueForRadioAlignmentField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the requiredCharacter field. You should also override
	 * the getValueForRequiredCharacterField function to handle calculating the requiredCharacter value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForRequiredCharacterField
	 */
	protected abstract function modifyQueryWithRequiredCharacterField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithRequiredCharacterField
	 */
	protected abstract function getValueForRequiredCharacterField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

}
