<?php
namespace Api\Config\Objects\VisitorPageView\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\VisitorPageViewRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class VisitorPageViewRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof VisitorPageViewRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				VisitorPageViewRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof VisitorPageViewRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				VisitorPageViewRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param VisitorPageViewRepresentation $representation
	 */
	private function validateReadOnlyFields(VisitorPageViewRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignSet()) {
			$invalidFields[] = 'campaign';
		}

		if ($representation->getIsCampaignIdSet()) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsCreatedAtSet()) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsDurationInSecondsSet()) {
			$invalidFields[] = 'durationInSeconds';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsSalesforceIdSet()) {
			$invalidFields[] = 'salesforceId';
		}

		if ($representation->getIsVisitSet()) {
			$invalidFields[] = 'visit';
		}

		if ($representation->getIsVisitIdSet()) {
			$invalidFields[] = 'visitId';
		}

		if ($representation->getIsVisitorSet()) {
			$invalidFields[] = 'visitor';
		}

		if ($representation->getIsVisitorIdSet()) {
			$invalidFields[] = 'visitorId';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param VisitorPageViewRepresentation $representation
	 */
	private function validateRequiredFields(VisitorPageViewRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(VisitorPageViewRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignIdSet() && is_null($representation->getCampaignId())) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsDurationInSecondsSet() && is_null($representation->getDurationInSeconds())) {
			$invalidFields[] = 'durationInSeconds';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsSalesforceIdSet() && is_null($representation->getSalesforceId())) {
			$invalidFields[] = 'salesforceId';
		}

		if ($representation->getIsTitleSet() && is_null($representation->getTitle())) {
			$invalidFields[] = 'title';
		}

		if ($representation->getIsUrlSet() && is_null($representation->getUrl())) {
			$invalidFields[] = 'url';
		}

		if ($representation->getIsVisitIdSet() && is_null($representation->getVisitId())) {
			$invalidFields[] = 'visitId';
		}

		if ($representation->getIsVisitorIdSet() && is_null($representation->getVisitorId())) {
			$invalidFields[] = 'visitorId';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
