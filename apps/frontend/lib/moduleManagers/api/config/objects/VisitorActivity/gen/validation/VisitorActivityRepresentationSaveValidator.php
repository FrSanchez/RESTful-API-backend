<?php
namespace Api\Config\Objects\VisitorActivity\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\VisitorActivityRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class VisitorActivityRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof VisitorActivityRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				VisitorActivityRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof VisitorActivityRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				VisitorActivityRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param VisitorActivityRepresentation $representation
	 */
	private function validateReadOnlyFields(VisitorActivityRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignSet()) {
			$invalidFields[] = 'campaign';
		}

		if ($representation->getIsCustomRedirectSet()) {
			$invalidFields[] = 'customRedirect';
		}

		if ($representation->getIsEmailSet()) {
			$invalidFields[] = 'email';
		}

		if ($representation->getIsEmailTemplateSet()) {
			$invalidFields[] = 'emailTemplate';
		}

		if ($representation->getIsFileSet()) {
			$invalidFields[] = 'file';
		}

		if ($representation->getIsFormSet()) {
			$invalidFields[] = 'form';
		}

		if ($representation->getIsFormHandlerSet()) {
			$invalidFields[] = 'formHandler';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsLandingPageSet()) {
			$invalidFields[] = 'landingPage';
		}

		if ($representation->getIsListEmailSet()) {
			$invalidFields[] = 'listEmail';
		}

		if ($representation->getIsOpportunitySet()) {
			$invalidFields[] = 'opportunity';
		}

		if ($representation->getIsProspectSet()) {
			$invalidFields[] = 'prospect';
		}

		if ($representation->getIsVisitSet()) {
			$invalidFields[] = 'visit';
		}

		if ($representation->getIsVisitorSet()) {
			$invalidFields[] = 'visitor';
		}

		if ($representation->getIsVisitorPageViewSet()) {
			$invalidFields[] = 'visitorPageView';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param VisitorActivityRepresentation $representation
	 */
	private function validateRequiredFields(VisitorActivityRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(VisitorActivityRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCampaignIdSet() && is_null($representation->getCampaignId())) {
			$invalidFields[] = 'campaignId';
		}

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsCustomRedirectIdSet() && is_null($representation->getCustomRedirectId())) {
			$invalidFields[] = 'customRedirectId';
		}

		if ($representation->getIsDetailsSet() && is_null($representation->getDetails())) {
			$invalidFields[] = 'details';
		}

		if ($representation->getIsEmailIdSet() && is_null($representation->getEmailId())) {
			$invalidFields[] = 'emailId';
		}

		if ($representation->getIsEmailTemplateIdSet() && is_null($representation->getEmailTemplateId())) {
			$invalidFields[] = 'emailTemplateId';
		}

		if ($representation->getIsFileIdSet() && is_null($representation->getFileId())) {
			$invalidFields[] = 'fileId';
		}

		if ($representation->getIsFormHandlerIdSet() && is_null($representation->getFormHandlerId())) {
			$invalidFields[] = 'formHandlerId';
		}

		if ($representation->getIsFormIdSet() && is_null($representation->getFormId())) {
			$invalidFields[] = 'formId';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsLandingPageIdSet() && is_null($representation->getLandingPageId())) {
			$invalidFields[] = 'landingPageId';
		}

		if ($representation->getIsListEmailIdSet() && is_null($representation->getListEmailId())) {
			$invalidFields[] = 'listEmailId';
		}

		if ($representation->getIsMultivariateTestVariationIdSet() && is_null($representation->getMultivariateTestVariationId())) {
			$invalidFields[] = 'multivariateTestVariationId';
		}

		if ($representation->getIsOpportunityIdSet() && is_null($representation->getOpportunityId())) {
			$invalidFields[] = 'opportunityId';
		}

		if ($representation->getIsPaidSearchAdIdSet() && is_null($representation->getPaidSearchAdId())) {
			$invalidFields[] = 'paidSearchAdId';
		}

		if ($representation->getIsProspectIdSet() && is_null($representation->getProspectId())) {
			$invalidFields[] = 'prospectId';
		}

		if ($representation->getIsSiteSearchQueryIdSet() && is_null($representation->getSiteSearchQueryId())) {
			$invalidFields[] = 'siteSearchQueryId';
		}

		if ($representation->getIsTypeSet() && is_null($representation->getType())) {
			$invalidFields[] = 'type';
		}

		if ($representation->getIsTypeNameSet() && is_null($representation->getTypeName())) {
			$invalidFields[] = 'typeName';
		}

		if ($representation->getIsUpdatedAtSet() && is_null($representation->getUpdatedAt())) {
			$invalidFields[] = 'updatedAt';
		}

		if ($representation->getIsVisitIdSet() && is_null($representation->getVisitId())) {
			$invalidFields[] = 'visitId';
		}

		if ($representation->getIsVisitorIdSet() && is_null($representation->getVisitorId())) {
			$invalidFields[] = 'visitorId';
		}

		if ($representation->getIsVisitorPageViewIdSet() && is_null($representation->getVisitorPageViewId())) {
			$invalidFields[] = 'visitorPageViewId';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
