<?php
namespace Api\Config\Objects\LifecycleHistory\Gen\Validation;

use Api\Exceptions\ApiException;
use Api\Gen\Representations\LifecycleHistoryRepresentation;
use Api\Representations\Representation;
use Api\Validation\RepresentationSaveValidator;
use ApiErrorLibrary;
use RuntimeException;
use RESTClient;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
class LifecycleHistoryRepresentationSaveValidator implements RepresentationSaveValidator
{
	public function validateCreate(Representation $representation): void
	{
		if (!($representation instanceof LifecycleHistoryRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				LifecycleHistoryRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateRequiredFields($representation);
		$this->validateNonNullableFields($representation);
	}

	public function validatePatchUpdate(Representation $representation): void
	{
		if (!($representation instanceof LifecycleHistoryRepresentation)) {
			throw new RuntimeException(
				"Unexpected representation specified.\nExpected: " .
				LifecycleHistoryRepresentation::class .
				"\nActual: " . get_class($representation)
			);
		}

		$this->validateReadOnlyFields($representation);
		$this->validateNonNullableFields($representation);
	}

	/**
	 * @param LifecycleHistoryRepresentation $representation
	 */
	private function validateReadOnlyFields(LifecycleHistoryRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCreatedAtSet()) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsIdSet()) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsNextStageSet()) {
			$invalidFields[] = 'nextStage';
		}

		if ($representation->getIsPreviousStageSet()) {
			$invalidFields[] = 'previousStage';
		}

		if ($representation->getIsProspectSet()) {
			$invalidFields[] = 'prospect';
		}

		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields are read only.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param LifecycleHistoryRepresentation $representation
	 */
	private function validateRequiredFields(LifecycleHistoryRepresentation $representation): void
	{
		$invalidFields = [];


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidFields),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	private function validateNonNullableFields(LifecycleHistoryRepresentation $representation): void
	{
		$invalidFields = [];

		if ($representation->getIsCreatedAtSet() && is_null($representation->getCreatedAt())) {
			$invalidFields[] = 'createdAt';
		}

		if ($representation->getIsIdSet() && is_null($representation->getId())) {
			$invalidFields[] = 'id';
		}

		if ($representation->getIsNextStageIdSet() && is_null($representation->getNextStageId())) {
			$invalidFields[] = 'nextStageId';
		}

		if ($representation->getIsPreviousStageIdSet() && is_null($representation->getPreviousStageId())) {
			$invalidFields[] = 'previousStageId';
		}

		if ($representation->getIsProspectIdSet() && is_null($representation->getProspectId())) {
			$invalidFields[] = 'prospectId';
		}

		if ($representation->getIsSecondsElapsedSet() && is_null($representation->getSecondsElapsed())) {
			$invalidFields[] = 'secondsElapsed';
		}


		if (!empty($invalidFields)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidFields) . ". These fields should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
