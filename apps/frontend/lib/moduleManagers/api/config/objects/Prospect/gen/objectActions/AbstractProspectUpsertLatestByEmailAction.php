<?php
namespace Api\Config\Objects\Prospect\Gen\ObjectActions;

use Api\Exceptions\ApiException;
use Api\Framework\FileInput;
use Api\Gen\Representations\ProspectRepresentation;
use Api\Objects\ObjectActions\ObjectAction;
use Api\Objects\ObjectActions\ObjectActionContext;
use Api\Representations\Representation;
use ApiErrorLibrary;
use Exception;
use RESTClient;
use RuntimeException;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
abstract class AbstractProspectUpsertLatestByEmailAction implements ObjectAction
{
	/**
	 * Override this method with any validation logic. This method is executed before the {@see executeActionWithArgs}
	 * method.
	 *
	 * @param ObjectActionContext $objectActionContext The current context in which the object action is being executed.
	 * @param array|null $fields
	 * @param string $matchEmail
	 * @param \Api\Gen\Representations\ProspectRepresentation $prospect
	 * @param bool|null $secondaryDeletedSearch
	 * @throws Exception
	 */
	public function validateWithArgs(
		ObjectActionContext $objectActionContext,
		?array $fields,
		string $matchEmail,
		\Api\Gen\Representations\ProspectRepresentation $prospect,
		?bool $secondaryDeletedSearch
	): void
	{
		// override this method to validate the arguments
	}

	/**
	 * Override this method with the logic to execute when the object action is invoked.
	 *
	 * @param ObjectActionContext $objectActionContext The current context in which the object action is being executed.
	 * @param array|null $fields
	 * @param string $matchEmail
	 * @param \Api\Gen\Representations\ProspectRepresentation $prospect
	 * @param bool|null $secondaryDeletedSearch
	 * @return ProspectRepresentation|null
	 */
	public abstract function executeActionWithArgs(
		ObjectActionContext $objectActionContext,
		?array $fields,
		string $matchEmail,
		\Api\Gen\Representations\ProspectRepresentation $prospect,
		?bool $secondaryDeletedSearch
	): ?ProspectRepresentation;

	final public function executeObjectAction(
		ObjectActionContext $objectActionContext,
		Representation $bodyRepresentation,
		?FileInput $fileInput
	): ?Representation {
		if (!$bodyRepresentation instanceof \Api\Gen\Representations\ProspectUpsertLatestByEmailObjectActionInputRepresentation) {
			throw new RuntimeException("Unexpected type for body representation. Expected \Api\Gen\Representations\ProspectUpsertLatestByEmailObjectActionInputRepresentation.");
		}

		$this->validateRequiredProperties($bodyRepresentation);
		$this->validateNonNullableProperties($bodyRepresentation);

		$this->validateWithArgs(
			$objectActionContext,
			$bodyRepresentation->getIsFieldsSet() ? $bodyRepresentation->getFields() : null,
			$bodyRepresentation->getIsMatchEmailSet() ? $bodyRepresentation->getMatchEmail() : null,
			$bodyRepresentation->getIsProspectSet() ? $bodyRepresentation->getProspect() : null,
			$bodyRepresentation->getIsSecondaryDeletedSearchSet() ? $bodyRepresentation->getSecondaryDeletedSearch() : null
		);
		return $this->executeActionWithArgs(
			$objectActionContext,
			$bodyRepresentation->getIsFieldsSet() ? $bodyRepresentation->getFields() : null,
			$bodyRepresentation->getIsMatchEmailSet() ? $bodyRepresentation->getMatchEmail() : null,
			$bodyRepresentation->getIsProspectSet() ? $bodyRepresentation->getProspect() : null,
			$bodyRepresentation->getIsSecondaryDeletedSearchSet() ? $bodyRepresentation->getSecondaryDeletedSearch() : null
		);
	}

	/**
	 * @param \Api\Gen\Representations\ProspectUpsertLatestByEmailObjectActionInputRepresentation $representation
	 */
	private function validateRequiredProperties(\Api\Gen\Representations\ProspectUpsertLatestByEmailObjectActionInputRepresentation $representation): void
	{
		$invalidProperties = [];

		if (!$representation->getIsMatchEmailSet()) {
			$invalidProperties[] = 'matchEmail';
		}

		if (!$representation->getIsProspectSet()) {
			$invalidProperties[] = 'prospect';
		}


		if (!empty($invalidProperties)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_MISSING_PROPERTY,
				implode(', ', $invalidProperties),
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}

	/**
	 * @param \Api\Gen\Representations\ProspectUpsertLatestByEmailObjectActionInputRepresentation $representation
	 */
	private function validateNonNullableProperties(\Api\Gen\Representations\ProspectUpsertLatestByEmailObjectActionInputRepresentation $representation): void
	{
		$invalidProperties = [];

		if ($representation->getIsFieldsSet() && is_null($representation->getFields())) {
			$invalidProperties[] = 'fields';
		}

		if ($representation->getIsMatchEmailSet() && is_null($representation->getMatchEmail())) {
			$invalidProperties[] = 'matchEmail';
		}

		if ($representation->getIsProspectSet() && is_null($representation->getProspect())) {
			$invalidProperties[] = 'prospect';
		}

		if ($representation->getIsSecondaryDeletedSearchSet() && is_null($representation->getSecondaryDeletedSearch())) {
			$invalidProperties[] = 'secondaryDeletedSearch';
		}


		if (!empty($invalidProperties)) {
			throw new ApiException(
				ApiErrorLibrary::API_ERROR_INVALID_PROPERTY,
				implode(', ', $invalidProperties) . ". These properties should not be null.",
				RESTClient::HTTP_BAD_REQUEST
			);
		}
	}
}
