<?php
namespace Api\Config\Objects\Export\Gen\Doctrine;

use Api\Objects\FieldDefinition;
use Api\Objects\Doctrine\QueryBuilderNode;
use RuntimeException;

/**
 * DO NOT MODIFY! This is generated by the API generation suite. Use "baker-api-gen" to generate a new version.

 */
abstract class AbstractExportDoctrineQueryModifier extends \Api\Objects\Doctrine\DoctrineQueryModifier
{
	/**
	 * Override this method to add any additional fields or join for the derived fields selected by the user. Usually
	 * getValueForDerivedField will also need to be overridden to handle calculating the derived field's value.
	 *
	 * @param QueryBuilderNode $queryBuilderNode
	 * @param FieldDefinition[] $derivedFieldDefinitions
	 */
	public function modifyQueryBuilderWithDerivedFields(QueryBuilderNode $queryBuilderNode, array $derivedFieldDefinitions): void
	{
		foreach ($derivedFieldDefinitions as $fieldDef) {
			switch ($fieldDef->getName()) {
				case 'fields':
				
					$this->modifyQueryWithFieldsField($queryBuilderNode, $fieldDef);
					break;
				case 'includeByteOrderMark':
				case 'include_byte_order_mark':
					$this->modifyQueryWithIncludeByteOrderMarkField($queryBuilderNode, $fieldDef);
					break;
				case 'maxFileSizeBytes':
				case 'max_file_size_bytes':
					$this->modifyQueryWithMaxFileSizeBytesField($queryBuilderNode, $fieldDef);
					break;
				case 'procedure':
				
					$this->modifyQueryWithProcedureField($queryBuilderNode, $fieldDef);
					break;
				default:
					throw new RuntimeException("Unhandled derived field: {$fieldDef->getName()}.");
			}
		}
			}

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 */
	protected function getValueForDerivedField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef)
	{
		switch ($fieldDef->getName()) {
			case 'fields':
			
				return $this->getValueForFieldsField($doctrineRecord, $fieldDef);
			case 'includeByteOrderMark':
			case 'include_byte_order_mark':
				return $this->getValueForIncludeByteOrderMarkField($doctrineRecord, $fieldDef);
			case 'maxFileSizeBytes':
			case 'max_file_size_bytes':
				return $this->getValueForMaxFileSizeBytesField($doctrineRecord, $fieldDef);
			case 'procedure':
			
				return $this->getValueForProcedureField($doctrineRecord, $fieldDef);
			default:
				return parent::getValueForDerivedField($doctrineRecord, $fieldDef);
		}
			}

	/**
	 * Override this method to add any additional fields or joins to calculate the fields field. You should also override
	 * the getValueForFieldsField function to handle calculating the fields value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForFieldsField
	 */
	protected abstract function modifyQueryWithFieldsField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithFieldsField
	 */
	protected abstract function getValueForFieldsField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the includeByteOrderMark field. You should also override
	 * the getValueForIncludeByteOrderMarkField function to handle calculating the includeByteOrderMark value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForIncludeByteOrderMarkField
	 */
	protected abstract function modifyQueryWithIncludeByteOrderMarkField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithIncludeByteOrderMarkField
	 */
	protected abstract function getValueForIncludeByteOrderMarkField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the maxFileSizeBytes field. You should also override
	 * the getValueForMaxFileSizeBytesField function to handle calculating the maxFileSizeBytes value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForMaxFileSizeBytesField
	 */
	protected abstract function modifyQueryWithMaxFileSizeBytesField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithMaxFileSizeBytesField
	 */
	protected abstract function getValueForMaxFileSizeBytesField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

	/**
	 * Override this method to add any additional fields or joins to calculate the procedure field. You should also override
	 * the getValueForProcedureField function to handle calculating the procedure value.
	 *
	 * @param QueryBuilderNode $queryBuilderRoot
	 * @param FieldDefinition $fieldDef
	 * @see getValueForProcedureField
	 */
	protected abstract function modifyQueryWithProcedureField(QueryBuilderNode $queryBuilderRoot, FieldDefinition $fieldDef);

	/**
	 * @param \Doctrine_Record $doctrineRecord
	 * @param FieldDefinition $fieldDef
	 * @return mixed
	 * @see modifyQueryWithProcedureField
	 */
	protected abstract function getValueForProcedureField(\Doctrine_Record $doctrineRecord, FieldDefinition $fieldDef);

}
